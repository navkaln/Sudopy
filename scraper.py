"""
This scrapes puzzles generated by websudoku and puts them into a numpy array
that can be plugged into used by the solver.
"""
import numpy as np
import requests
from lxml import html

def grab_new_tree():
	page = requests.get('http://view.websudoku.com/?level=3')
	tree = html.fromstring(page.content)
	return tree

def grab_numbers(tree):
	data = []

	ones = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=1]')
	for entry in ones:
		#print(entry.value,entry.name[6:])
		data.append([entry.value,entry.name[6:]])

	twos = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=2]')
	for entry in twos:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	threes = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=3]')
	for entry in threes:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])
	
	fours = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=4]')
	for entry in fours:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	fives = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=5]')
	for entry in fives:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	sixes = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=6]')
	for entry in sixes:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	sevens = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=7]')
	for entry in sevens:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	eights = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=8]')
	for entry in eights:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])

	nines = tree.xpath('//*[@id="puzzle_grid"]/tr/td/input[@value=9]')
	for entry in nines:
		#print(entry.value,entry.name)
		data.append([entry.value,entry.name[6:]])
	return split_coords(data)


def split_coords(array):
	temp = []
	for thing in array:
		#print(thing[0])
		#print([thing[1][0], thing[1][1]])
		temp += [(int(thing[0]), [int(thing[1][0]), int(thing[1][1])])]
	return temp

def prepare_unsolved(data):
	unsolved = np.zeros((9,9))
	#print(xy)
	#print(data)
	#print(data[0])
	for z, xy in data:
		unsolved[xy[0]-1][xy[1]-1] = z
		#print(z)
		#print(xy[0], xy[1])
	return unsolved

def grab_unsolved():
	tree = grab_new_tree()
	data = grab_numbers(tree)
	unsolved = prepare_unsolved(data)
	return(unsolved)

print(grab_unsolved())